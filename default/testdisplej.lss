
testdisplej.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000008c  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006a  0080006a  0000012a  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000033  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000d1  00000000  00000000  0000017d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000008d  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000009d  00000000  00000000  000002db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000093  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e8       	ldi	r30, 0x8C	; 140
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	aa e6       	ldi	r26, 0x6A	; 106
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ad 36       	cpi	r26, 0x6D	; 109
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	16 c0       	rjmp	.+44     	; 0x88 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:

int main()
{
  char i;

  PORTD = 0x6f;
  5e:	8f e6       	ldi	r24, 0x6F	; 111
  60:	82 bb       	out	0x12, r24	; 18
  62:	90 e0       	ldi	r25, 0x00	; 0
  for (i = 0; i < 8; i++) {
  	PORTB <<= 1;
  64:	88 b3       	in	r24, 0x18	; 24
  66:	88 0f       	add	r24, r24
  68:	88 bb       	out	0x18, r24	; 24
    if ((PORTD & 0x80) == 0x80)
  6a:	97 9b       	sbis	0x12, 7	; 18
  6c:	02 c0       	rjmp	.+4      	; 0x72 <main+0x14>
	  PORTB |= 1;
  6e:	c0 9a       	sbi	0x18, 0	; 24
  70:	02 c0       	rjmp	.+4      	; 0x76 <main+0x18>
	else PORTB |= 0;
  72:	88 b3       	in	r24, 0x18	; 24
  74:	88 bb       	out	0x18, r24	; 24

	PORTD <<= 1;
  76:	82 b3       	in	r24, 0x12	; 18
  78:	88 0f       	add	r24, r24
  7a:	82 bb       	out	0x12, r24	; 18
int main()
{
  char i;

  PORTD = 0x6f;
  for (i = 0; i < 8; i++) {
  7c:	9f 5f       	subi	r25, 0xFF	; 255
  7e:	98 30       	cpi	r25, 0x08	; 8
  80:	89 f7       	brne	.-30     	; 0x64 <main+0x6>
	  PORTB |= 1;
	else PORTB |= 0;

	PORTD <<= 1;
  }
}
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	08 95       	ret

00000088 <_exit>:
  88:	f8 94       	cli

0000008a <__stop_program>:
  8a:	ff cf       	rjmp	.-2      	; 0x8a <__stop_program>
