
tomas_spin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000025  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002a9  00000000  00000000  0000015b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f0  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000237  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  0000072c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d9  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000f0  00000000  00000000  00000835  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	4a d0       	rcall	.+148    	; 0xb2 <main>
  1e:	4f c0       	rjmp	.+158    	; 0xbe <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <pipaj>:
#include <avr/io.h>
#include <util/delay.h>

void pipaj(void)
{
  PORTB |= 0b10000;
  22:	c4 9a       	sbi	0x18, 4	; 24
  24:	88 eb       	ldi	r24, 0xB8	; 184
  26:	9b e0       	ldi	r25, 0x0B	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  28:	20 ef       	ldi	r18, 0xF0	; 240
  2a:	30 e0       	ldi	r19, 0x00	; 0
  2c:	f9 01       	movw	r30, r18
  2e:	31 97       	sbiw	r30, 0x01	; 1
  30:	f1 f7       	brne	.-4      	; 0x2e <pipaj+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  32:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  34:	d9 f7       	brne	.-10     	; 0x2c <pipaj+0xa>
  _delay_ms(300);
  PORTB ^= 0b10000;
  36:	88 b3       	in	r24, 0x18	; 24
  38:	90 e1       	ldi	r25, 0x10	; 16
  3a:	89 27       	eor	r24, r25
  3c:	88 bb       	out	0x18, r24	; 24
  3e:	88 eb       	ldi	r24, 0xB8	; 184
  40:	9b e0       	ldi	r25, 0x0B	; 11
  42:	20 ef       	ldi	r18, 0xF0	; 240
  44:	30 e0       	ldi	r19, 0x00	; 0
  46:	f9 01       	movw	r30, r18
  48:	31 97       	sbiw	r30, 0x01	; 1
  4a:	f1 f7       	brne	.-4      	; 0x48 <__SREG__+0x9>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  4c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  4e:	d9 f7       	brne	.-10     	; 0x46 <__SREG__+0x7>
  _delay_ms(300);
  PORTB |= 0b10000;
  50:	c4 9a       	sbi	0x18, 4	; 24
  52:	88 eb       	ldi	r24, 0xB8	; 184
  54:	9b e0       	ldi	r25, 0x0B	; 11
  56:	20 ef       	ldi	r18, 0xF0	; 240
  58:	30 e0       	ldi	r19, 0x00	; 0
  5a:	f9 01       	movw	r30, r18
  5c:	31 97       	sbiw	r30, 0x01	; 1
  5e:	f1 f7       	brne	.-4      	; 0x5c <__SREG__+0x1d>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  60:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  62:	d9 f7       	brne	.-10     	; 0x5a <__SREG__+0x1b>
  _delay_ms(300);
  PORTB ^= 0b10000;
  64:	88 b3       	in	r24, 0x18	; 24
  66:	90 e1       	ldi	r25, 0x10	; 16
  68:	89 27       	eor	r24, r25
  6a:	88 bb       	out	0x18, r24	; 24
  6c:	88 ee       	ldi	r24, 0xE8	; 232
  6e:	93 e0       	ldi	r25, 0x03	; 3
  70:	20 ef       	ldi	r18, 0xF0	; 240
  72:	30 e0       	ldi	r19, 0x00	; 0
  74:	f9 01       	movw	r30, r18
  76:	31 97       	sbiw	r30, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <__SREG__+0x37>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  7a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  7c:	d9 f7       	brne	.-10     	; 0x74 <__SREG__+0x35>
  _delay_ms(100);
  while (bit_is_clear(PINB, 3))
  7e:	b3 9b       	sbis	0x16, 3	; 22
  80:	fe cf       	rjmp	.-4      	; 0x7e <__SREG__+0x3f>
    ;
  PORTB |= 0b10000;
  82:	c4 9a       	sbi	0x18, 4	; 24
  84:	80 e7       	ldi	r24, 0x70	; 112
  86:	97 e1       	ldi	r25, 0x17	; 23
  88:	20 ef       	ldi	r18, 0xF0	; 240
  8a:	30 e0       	ldi	r19, 0x00	; 0
  8c:	f9 01       	movw	r30, r18
  8e:	31 97       	sbiw	r30, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <__SREG__+0x4f>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  92:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  94:	d9 f7       	brne	.-10     	; 0x8c <__SREG__+0x4d>
  _delay_ms(600);
  PORTB ^= 0b10000;
  96:	88 b3       	in	r24, 0x18	; 24
  98:	90 e1       	ldi	r25, 0x10	; 16
  9a:	89 27       	eor	r24, r25
  9c:	88 bb       	out	0x18, r24	; 24
  9e:	80 e1       	ldi	r24, 0x10	; 16
  a0:	97 e2       	ldi	r25, 0x27	; 39
  a2:	20 ef       	ldi	r18, 0xF0	; 240
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	f9 01       	movw	r30, r18
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <__stack+0x9>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ae:	d9 f7       	brne	.-10     	; 0xa6 <__stack+0x7>

  _delay_ms(1000);
}
  b0:	08 95       	ret

000000b2 <main>:

int main(void)
{
  //char stav;
  
  asm("sbi 0x17,4");
  b2:	bc 9a       	sbi	0x17, 4	; 23
  asm("cbi 0x17,3");
  b4:	bb 98       	cbi	0x17, 3	; 23
  //stav = 0;
  while (1) {
    if (bit_is_clear(PINB, 3)) {
  b6:	b3 99       	sbic	0x16, 3	; 22
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <main+0x4>
	  //stav ^= 0xff;
	  pipaj();
  ba:	b3 df       	rcall	.-154    	; 0x22 <pipaj>
  bc:	fc cf       	rjmp	.-8      	; 0xb6 <main+0x4>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
