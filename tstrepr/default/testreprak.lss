
testreprak.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000054  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000000c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001cd  00000000  00000000  000000e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e5  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000151  00000000  00000000  00000395  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000004e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000fa  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000018  00000000  00000000  00000602  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000078  00000000  00000000  0000061a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>
  22:	07 c0       	rjmp	.+14     	; 0x32 <__bad_interrupt>
  24:	06 c0       	rjmp	.+12     	; 0x32 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	02 d0       	rcall	.+4      	; 0x34 <main>
  30:	0f c0       	rjmp	.+30     	; 0x50 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <main>:
#define xtal 4000000

int main(void)
{

  DDRB = 0xff;
  34:	8f ef       	ldi	r24, 0xFF	; 255
  36:	87 bb       	out	0x17, r24	; 23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  38:	2a ef       	ldi	r18, 0xFA	; 250
  3a:	30 e0       	ldi	r19, 0x00	; 0
  while (1) {
    PORTB = 0;
	_delay_us(250);
	PORTB = 1;
  3c:	41 e0       	ldi	r20, 0x01	; 1
int main(void)
{

  DDRB = 0xff;
  while (1) {
    PORTB = 0;
  3e:	18 ba       	out	0x18, r1	; 24
  40:	c9 01       	movw	r24, r18
  42:	01 97       	sbiw	r24, 0x01	; 1
  44:	f1 f7       	brne	.-4      	; 0x42 <__SREG__+0x3>
	_delay_us(250);
	PORTB = 1;
  46:	48 bb       	out	0x18, r20	; 24
  48:	c9 01       	movw	r24, r18
  4a:	01 97       	sbiw	r24, 0x01	; 1
  4c:	f1 f7       	brne	.-4      	; 0x4a <__SREG__+0xb>
  4e:	f7 cf       	rjmp	.-18     	; 0x3e <__SP_H__>

00000050 <_exit>:
  50:	f8 94       	cli

00000052 <__stop_program>:
  52:	ff cf       	rjmp	.-2      	; 0x52 <__stop_program>
