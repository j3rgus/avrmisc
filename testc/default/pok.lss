
pok.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000054  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000025  00000000  00000000  000000c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000009e  00000000  00000000  000000ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000006a  00000000  00000000  0000018b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000087  00000000  00000000  000001f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000008f  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>
  22:	07 c0       	rjmp	.+14     	; 0x32 <__bad_interrupt>
  24:	06 c0       	rjmp	.+12     	; 0x32 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	07 d0       	rcall	.+14     	; 0x3e <main>
  30:	0f c0       	rjmp	.+30     	; 0x50 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <delay>:
#include <avr/io.h>

void delay()
{
asm volatile (
  34:	00 e0       	ldi	r16, 0x00	; 0
  36:	03 95       	inc	r16
  38:	0a 30       	cpi	r16, 0x0A	; 10
  3a:	e9 f7       	brne	.-6      	; 0x36 <delay+0x2>
		"1:"			"\n\t"
			"inc r16"		"\n\t"
			"cpi r16,10"	"\n\t"
			"brne 1b"	"\n\t"
        );
}
  3c:	08 95       	ret

0000003e <main>:

int main()
{
DDRB = 0xff;
  3e:	8f ef       	ldi	r24, 0xFF	; 255
  40:	87 bb       	out	0x17, r24	; 23
#include <avr/io.h>

void delay()
{
asm volatile (
  42:	00 e0       	ldi	r16, 0x00	; 0
  44:	03 95       	inc	r16
  46:	0a 30       	cpi	r16, 0x0A	; 10
  48:	e9 f7       	brne	.-6      	; 0x44 <__SREG__+0x5>

int main()
{
DDRB = 0xff;
delay();
}
  4a:	80 e0       	ldi	r24, 0x00	; 0
  4c:	90 e0       	ldi	r25, 0x00	; 0
  4e:	08 95       	ret

00000050 <_exit>:
  50:	f8 94       	cli

00000052 <__stop_program>:
  52:	ff cf       	rjmp	.-2      	; 0x52 <__stop_program>
