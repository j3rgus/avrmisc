
tstuart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000004f  00000000  00000000  000000f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000150  00000000  00000000  00000143  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f4  00000000  00000000  00000293  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000bd  00000000  00000000  00000387  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000be  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000013  00000000  00000000  00000552  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	23 c0       	rjmp	.+70     	; 0x7c <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
}

/* 19200kbps 8N1 */
void USART_Init(void)
{
  asm volatile (
  38:	00 27       	eor	r16, r16
  3a:	0b b9       	out	0x0b, r16	; 11
  3c:	00 bd       	out	0x20, r16	; 32
  3e:	08 e1       	ldi	r16, 0x18	; 24
  40:	0a b9       	out	0x0a, r16	; 10
  42:	06 e8       	ldi	r16, 0x86	; 134
  44:	00 bd       	out	0x20, r16	; 32
  46:	0c e0       	ldi	r16, 0x0C	; 12
  48:	09 b9       	out	0x09, r16	; 9
}

char USART_Receive(void)
{
  char l_data;
  asm volatile (
  4a:	5f 9b       	sbis	0x0b, 7	; 11
  4c:	fe cf       	rjmp	.-4      	; 0x4a <__SREG__+0xb>
  4e:	8c b1       	in	r24, 0x0c	; 12
  }
}

void USART_Transmit(char data)
{
  asm volatile (
  50:	5d 9b       	sbis	0x0b, 5	; 11
  52:	fe cf       	rjmp	.-4      	; 0x50 <__SREG__+0x11>
  54:	8c b9       	out	0x0c, r24	; 12
  56:	f9 cf       	rjmp	.-14     	; 0x4a <__SREG__+0xb>

00000058 <USART_Transmit>:
  58:	5d 9b       	sbis	0x0b, 5	; 11
  5a:	fe cf       	rjmp	.-4      	; 0x58 <USART_Transmit>
  5c:	8c b9       	out	0x0c, r24	; 12
	"rjmp 12b"		"\n\t"
	"out 0x0c,%0"	"\n\t"
	:
	:"r" (data)
  );
}
  5e:	08 95       	ret

00000060 <USART_Receive>:

char USART_Receive(void)
{
  char l_data;
  asm volatile (
  60:	5f 9b       	sbis	0x0b, 7	; 11
  62:	fe cf       	rjmp	.-4      	; 0x60 <USART_Receive>
  64:	8c b1       	in	r24, 0x0c	; 12
	"in %0,0x0C"	"\n\t"
	:"=&r" (l_data)
	:
  );
  return l_data;
}
  66:	08 95       	ret

00000068 <USART_Init>:

/* 19200kbps 8N1 */
void USART_Init(void)
{
  asm volatile (
  68:	00 27       	eor	r16, r16
  6a:	0b b9       	out	0x0b, r16	; 11
  6c:	00 bd       	out	0x20, r16	; 32
  6e:	08 e1       	ldi	r16, 0x18	; 24
  70:	0a b9       	out	0x0a, r16	; 10
  72:	06 e8       	ldi	r16, 0x86	; 134
  74:	00 bd       	out	0x20, r16	; 32
  76:	0c e0       	ldi	r16, 0x0C	; 12
  78:	09 b9       	out	0x09, r16	; 9
	"ldi r16,0x86"	"\n\t"
	"out 0x20,r16"	"\n\t"
	"ldi r16,0x0c"	"\n\t"
	"out 0x09,r16"	"\n\t"
  );
}
  7a:	08 95       	ret

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>
