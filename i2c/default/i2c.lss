
i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000a6  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000841  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001d0  00000000  00000000  00000b79  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000570  00000000  00000000  00000d49  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000b0  00000000  00000000  000012bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000162  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000002e0  00000000  00000000  000014ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000001c8  00000000  00000000  000017ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	a0 d0       	rcall	.+320    	; 0x174 <main>
  34:	f2 c0       	rjmp	.+484    	; 0x21a <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <i2c_start>:
  i2c_DDR &= ~(1 << SDA);
}*/

char i2c_start(void)
{
  i2c_DDR &= ~(1 << SCL);
  38:	8e 98       	cbi	0x11, 6	; 17
  i2c_DDR &= ~(1 << SDA);
  3a:	8d 98       	cbi	0x11, 5	; 17
  asm("nop");
  3c:	00 00       	nop
  asm("nop");
  3e:	00 00       	nop
  if (bit_is_clear(i2c_PIN, SDA))
  40:	85 9b       	sbis	0x10, 5	; 16
  42:	0e c0       	rjmp	.+28     	; 0x60 <__SREG__+0x21>
    return 0;
  if (bit_is_clear(i2c_PIN, SCL))
  44:	86 9b       	sbis	0x10, 6	; 16
  46:	0c c0       	rjmp	.+24     	; 0x60 <__SREG__+0x21>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  48:	86 e0       	ldi	r24, 0x06	; 6
  4a:	98 2f       	mov	r25, r24
  4c:	9a 95       	dec	r25
  4e:	f1 f7       	brne	.-4      	; 0x4c <__SREG__+0xd>
    return 0;
  _delay_us(5);
  i2c_DDR |= (1 << SDA);
  50:	8d 9a       	sbi	0x11, 5	; 17
  i2c_PORT &= ~(1 << SDA);
  52:	95 98       	cbi	0x12, 5	; 18
  54:	8a 95       	dec	r24
  56:	f1 f7       	brne	.-4      	; 0x54 <__SREG__+0x15>
  _delay_us(5);
  i2c_DDR |= (1 << SCL);
  58:	8e 9a       	sbi	0x11, 6	; 17
  i2c_PORT &= ~(1 << SCL);
  5a:	96 98       	cbi	0x12, 6	; 18
  5c:	81 e0       	ldi	r24, 0x01	; 1
  5e:	08 95       	ret
  return 1;
  60:	80 e0       	ldi	r24, 0x00	; 0
}
  62:	08 95       	ret

00000064 <i2c_stop>:

void i2c_stop(void)
{
  i2c_DDR |= (1 << SDA);
  64:	8d 9a       	sbi	0x11, 5	; 17
  i2c_PORT &= ~(1 << SDA);
  66:	95 98       	cbi	0x12, 5	; 18
  i2c_DDR |= (1 << SCL);
  68:	8e 9a       	sbi	0x11, 6	; 17
  i2c_PORT &= ~(1 << SCL);
  6a:	96 98       	cbi	0x12, 6	; 18
  6c:	8d e0       	ldi	r24, 0x0D	; 13
  6e:	8a 95       	dec	r24
  70:	f1 f7       	brne	.-4      	; 0x6e <i2c_stop+0xa>
  _delay_us(10);
  i2c_DDR &= ~(1 << SCL);
  72:	8e 98       	cbi	0x11, 6	; 17
  74:	86 e0       	ldi	r24, 0x06	; 6
  76:	8a 95       	dec	r24
  78:	f1 f7       	brne	.-4      	; 0x76 <i2c_stop+0x12>
  _delay_us(5);
  i2c_DDR &= ~(1 << SDA);
  7a:	8d 98       	cbi	0x11, 5	; 17
}
  7c:	08 95       	ret

0000007e <i2c_write>:

char i2c_write(char data)
{
  7e:	20 e0       	ldi	r18, 0x00	; 0
  80:	4d e0       	ldi	r20, 0x0D	; 13
  char i, res = 1;
  
  for (i = 0; i < 8; i++) {
    if ((data & 0x80) == 0) {
  82:	36 e0       	ldi	r19, 0x06	; 6
  84:	87 fd       	sbrc	r24, 7
  86:	03 c0       	rjmp	.+6      	; 0x8e <i2c_write+0x10>
	  i2c_DDR |= (1 << SDA);
  88:	8d 9a       	sbi	0x11, 5	; 17
	  i2c_PORT &= ~(1 << SDA);
  8a:	95 98       	cbi	0x12, 5	; 18
  8c:	01 c0       	rjmp	.+2      	; 0x90 <i2c_write+0x12>
	}
	else
	  i2c_DDR &= ~(1 << SDA);
  8e:	8d 98       	cbi	0x11, 5	; 17
  90:	94 2f       	mov	r25, r20
  92:	9a 95       	dec	r25
  94:	f1 f7       	brne	.-4      	; 0x92 <i2c_write+0x14>
	
	_delay_us(10);
	i2c_DDR &= ~(1 << SCL);
  96:	8e 98       	cbi	0x11, 6	; 17
  98:	93 2f       	mov	r25, r19
  9a:	9a 95       	dec	r25
  9c:	f1 f7       	brne	.-4      	; 0x9a <i2c_write+0x1c>
	_delay_us(5);
	while (bit_is_clear(i2c_PIN, SCL))
  9e:	86 9b       	sbis	0x10, 6	; 16
  a0:	fe cf       	rjmp	.-4      	; 0x9e <i2c_write+0x20>
  a2:	93 2f       	mov	r25, r19
  a4:	9a 95       	dec	r25
  a6:	f1 f7       	brne	.-4      	; 0xa4 <i2c_write+0x26>
	  ;
	_delay_us(5);
	i2c_DDR |= (1 << SCL);
  a8:	8e 9a       	sbi	0x11, 6	; 17
	i2c_PORT &= ~(1 << SCL);
  aa:	96 98       	cbi	0x12, 6	; 18

char i2c_write(char data)
{
  char i, res = 1;
  
  for (i = 0; i < 8; i++) {
  ac:	2f 5f       	subi	r18, 0xFF	; 255
  ae:	28 30       	cpi	r18, 0x08	; 8
  b0:	11 f0       	breq	.+4      	; 0xb6 <i2c_write+0x38>
	while (bit_is_clear(i2c_PIN, SCL))
	  ;
	_delay_us(5);
	i2c_DDR |= (1 << SCL);
	i2c_PORT &= ~(1 << SCL);
	data <<= 1;
  b2:	88 0f       	add	r24, r24
  b4:	e7 cf       	rjmp	.-50     	; 0x84 <i2c_write+0x6>
  }
  i2c_DDR &= ~(1 << SDA);
  b6:	8d 98       	cbi	0x11, 5	; 17
  b8:	86 e0       	ldi	r24, 0x06	; 6
  ba:	8a 95       	dec	r24
  bc:	f1 f7       	brne	.-4      	; 0xba <i2c_write+0x3c>
  _delay_us(5);
  i2c_DDR &= ~(1 << SCL);
  be:	8e 98       	cbi	0x11, 6	; 17
  c0:	8d e0       	ldi	r24, 0x0D	; 13
  c2:	8a 95       	dec	r24
  c4:	f1 f7       	brne	.-4      	; 0xc2 <i2c_write+0x44>
  _delay_us(10);
  if (bit_is_set(i2c_PIN, SDA))
  c6:	80 b3       	in	r24, 0x10	; 16
    res = 0;
  i2c_DDR |= (1 << SCL);
  c8:	8e 9a       	sbi	0x11, 6	; 17
  i2c_PORT &= ~(1 << SCL);
  ca:	96 98       	cbi	0x12, 6	; 18
  cc:	82 95       	swap	r24
  ce:	86 95       	lsr	r24
  d0:	87 70       	andi	r24, 0x07	; 7
  d2:	80 95       	com	r24
  return res;
}
  d4:	81 70       	andi	r24, 0x01	; 1
  d6:	08 95       	ret

000000d8 <i2c_read>:

char i2c_read(void)
{
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	20 e0       	ldi	r18, 0x00	; 0
  dc:	46 e0       	ldi	r20, 0x06	; 6
  char i, data = 0;

  for (i = 0; i < 8; i++) {
    data <<= 1;
  de:	3d e0       	ldi	r19, 0x0D	; 13
  e0:	22 0f       	add	r18, r18
    i2c_DDR &= ~(1 << SCL);
  e2:	8e 98       	cbi	0x11, 6	; 17
	while (bit_is_clear(i2c_PIN, SCL))
  e4:	86 9b       	sbis	0x10, 6	; 16
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <i2c_read+0xc>
  e8:	84 2f       	mov	r24, r20
  ea:	8a 95       	dec	r24
  ec:	f1 f7       	brne	.-4      	; 0xea <i2c_read+0x12>
	  ;
	_delay_us(5);
	if (bit_is_clear(i2c_PIN, SDA))
  ee:	85 99       	sbic	0x10, 5	; 16
	  data |= 0;
	else data |= 1;
  f0:	21 60       	ori	r18, 0x01	; 1
  f2:	83 2f       	mov	r24, r19
  f4:	8a 95       	dec	r24
  f6:	f1 f7       	brne	.-4      	; 0xf4 <i2c_read+0x1c>
	_delay_us(10);
	i2c_DDR |= (1 << SCL);
  f8:	8e 9a       	sbi	0x11, 6	; 17
	i2c_PORT &= ~(1 << SCL);
  fa:	96 98       	cbi	0x12, 6	; 18
  fc:	83 2f       	mov	r24, r19
  fe:	8a 95       	dec	r24
 100:	f1 f7       	brne	.-4      	; 0xfe <i2c_read+0x26>

char i2c_read(void)
{
  char i, data = 0;

  for (i = 0; i < 8; i++) {
 102:	9f 5f       	subi	r25, 0xFF	; 255
 104:	98 30       	cpi	r25, 0x08	; 8
 106:	61 f7       	brne	.-40     	; 0xe0 <i2c_read+0x8>
	_delay_us(10);
	i2c_DDR |= (1 << SCL);
	i2c_PORT &= ~(1 << SCL);
	_delay_us(10);
  }
  i2c_DDR &= ~(1 << SDA);
 108:	8d 98       	cbi	0x11, 5	; 17
 10a:	86 e0       	ldi	r24, 0x06	; 6
 10c:	98 2f       	mov	r25, r24
 10e:	9a 95       	dec	r25
 110:	f1 f7       	brne	.-4      	; 0x10e <i2c_read+0x36>
  _delay_us(5);
  i2c_DDR &= ~(1 << SCL);
 112:	8e 98       	cbi	0x11, 6	; 17
 114:	9d e0       	ldi	r25, 0x0D	; 13
 116:	9a 95       	dec	r25
 118:	f1 f7       	brne	.-4      	; 0x116 <i2c_read+0x3e>
  _delay_us(10);
  i2c_DDR |= (1 << SCL);
 11a:	8e 9a       	sbi	0x11, 6	; 17
  i2c_PORT &= ~(1 << SCL);
 11c:	96 98       	cbi	0x12, 6	; 18
 11e:	98 2f       	mov	r25, r24
 120:	9a 95       	dec	r25
 122:	f1 f7       	brne	.-4      	; 0x120 <i2c_read+0x48>
  _delay_us(5);
  i2c_DDR &= ~(1 << SDA);
 124:	8d 98       	cbi	0x11, 5	; 17
 126:	8a 95       	dec	r24
 128:	f1 f7       	brne	.-4      	; 0x126 <i2c_read+0x4e>
  _delay_us(5);
  return data;
}
 12a:	82 2f       	mov	r24, r18
 12c:	08 95       	ret

0000012e <write_ds1307>:

void write_ds1307(char addr, char data)
{
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	18 2f       	mov	r17, r24
 134:	06 2f       	mov	r16, r22
 i2c_start();
 136:	80 df       	rcall	.-256    	; 0x38 <i2c_start>
 i2c_write(0xD0);
 138:	80 ed       	ldi	r24, 0xD0	; 208
 13a:	a1 df       	rcall	.-190    	; 0x7e <i2c_write>
 i2c_write(addr);
 13c:	81 2f       	mov	r24, r17
 13e:	9f df       	rcall	.-194    	; 0x7e <i2c_write>
 i2c_write(data);
 140:	80 2f       	mov	r24, r16
 142:	9d df       	rcall	.-198    	; 0x7e <i2c_write>
 i2c_stop();
 144:	8f df       	rcall	.-226    	; 0x64 <i2c_stop>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 146:	80 e2       	ldi	r24, 0x20	; 32
 148:	9e e4       	ldi	r25, 0x4E	; 78
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <write_ds1307+0x1c>
 _delay_ms(20);
}
 14e:	1f 91       	pop	r17
 150:	0f 91       	pop	r16
 152:	08 95       	ret

00000154 <read_ds1307>:

char read_ds1307(char addr)
{       
 154:	1f 93       	push	r17
 156:	18 2f       	mov	r17, r24
 char data;
 i2c_start();
 158:	6f df       	rcall	.-290    	; 0x38 <i2c_start>
 i2c_write(0xD0);
 15a:	80 ed       	ldi	r24, 0xD0	; 208
 15c:	90 df       	rcall	.-224    	; 0x7e <i2c_write>
 i2c_write(addr);
 15e:	81 2f       	mov	r24, r17
 160:	8e df       	rcall	.-228    	; 0x7e <i2c_write>
 i2c_start();
 162:	6a df       	rcall	.-300    	; 0x38 <i2c_start>
 i2c_write(0xD1);
 164:	81 ed       	ldi	r24, 0xD1	; 209
 166:	8b df       	rcall	.-234    	; 0x7e <i2c_write>
 data = i2c_read();
 168:	b7 df       	rcall	.-146    	; 0xd8 <i2c_read>
 16a:	18 2f       	mov	r17, r24
 i2c_stop();
 16c:	7b df       	rcall	.-266    	; 0x64 <i2c_stop>
 return data;
}
 16e:	81 2f       	mov	r24, r17
 170:	1f 91       	pop	r17
 172:	08 95       	ret

00000174 <main>:
char i2c_read(void);
void write_ds1307(char addr, char data);
char read_ds1307(char addr);

int main(void)
{
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
  _delay_us(20);
}

void USART_Init(void)
{
  asm volatile (
 17c:	00 27       	eor	r16, r16
 17e:	0b b9       	out	0x0b, r16	; 11
 180:	00 bd       	out	0x20, r16	; 32
 182:	08 e1       	ldi	r16, 0x18	; 24
 184:	0a b9       	out	0x0a, r16	; 10
 186:	06 e8       	ldi	r16, 0x86	; 134
 188:	00 bd       	out	0x20, r16	; 32
 18a:	0c e0       	ldi	r16, 0x0C	; 12
 18c:	09 b9       	out	0x09, r16	; 9
  char sek;

  //i2c_init();
  USART_Init();
  
  write_ds1307(0x00, 0x04);
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	64 e0       	ldi	r22, 0x04	; 4
 192:	cd df       	rcall	.-102    	; 0x12e <write_ds1307>
  return l_data;
}

void USART_Transmit(char data)
{
  asm volatile (
 194:	00 e2       	ldi	r16, 0x20	; 32
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 196:	1a e1       	ldi	r17, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 198:	c4 e6       	ldi	r28, 0x64	; 100
 19a:	d0 e0       	ldi	r29, 0x00	; 0
  //i2c_init();
  USART_Init();
  
  write_ds1307(0x00, 0x04);
  while (1) {
    sek = read_ds1307(0x00);
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	da df       	rcall	.-76     	; 0x154 <read_ds1307>
  return l_data;
}

void USART_Transmit(char data)
{
  asm volatile (
 1a0:	5d 9b       	sbis	0x0b, 5	; 11
 1a2:	fe cf       	rjmp	.-4      	; 0x1a0 <main+0x2c>
 1a4:	0c b9       	out	0x0c, r16	; 12
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1a6:	91 2f       	mov	r25, r17
 1a8:	9a 95       	dec	r25
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <main+0x34>
 1ac:	5d 9b       	sbis	0x0b, 5	; 11
 1ae:	fe cf       	rjmp	.-4      	; 0x1ac <main+0x38>
 1b0:	8c b9       	out	0x0c, r24	; 12
 1b2:	81 2f       	mov	r24, r17
 1b4:	8a 95       	dec	r24
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <main+0x40>
 1b8:	5d 9b       	sbis	0x0b, 5	; 11
 1ba:	fe cf       	rjmp	.-4      	; 0x1b8 <main+0x44>
 1bc:	0c b9       	out	0x0c, r16	; 12
 1be:	81 2f       	mov	r24, r17
 1c0:	8a 95       	dec	r24
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <main+0x4c>
 1c4:	80 ed       	ldi	r24, 0xD0	; 208
 1c6:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1c8:	fe 01       	movw	r30, r28
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <main+0x56>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d0:	d9 f7       	brne	.-10     	; 0x1c8 <main+0x54>
 1d2:	80 ed       	ldi	r24, 0xD0	; 208
 1d4:	97 e0       	ldi	r25, 0x07	; 7
 1d6:	fe 01       	movw	r30, r28
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <main+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1dc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1de:	d9 f7       	brne	.-10     	; 0x1d6 <main+0x62>
 1e0:	80 ed       	ldi	r24, 0xD0	; 208
 1e2:	97 e0       	ldi	r25, 0x07	; 7
 1e4:	fe 01       	movw	r30, r28
 1e6:	31 97       	sbiw	r30, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <main+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ec:	d9 f7       	brne	.-10     	; 0x1e4 <main+0x70>
 1ee:	d6 cf       	rjmp	.-84     	; 0x19c <main+0x28>

000001f0 <USART_Receive>:
}

char USART_Receive(void)
{
  char l_data;
  asm volatile (
 1f0:	5f 9b       	sbis	0x0b, 7	; 11
 1f2:	fe cf       	rjmp	.-4      	; 0x1f0 <USART_Receive>
 1f4:	8c b1       	in	r24, 0x0c	; 12
	"in %0,0x0C"	"\n\t"
	:"=&r" (l_data)
	:
  );
  return l_data;
}
 1f6:	08 95       	ret

000001f8 <USART_Transmit>:

void USART_Transmit(char data)
{
  asm volatile (
 1f8:	5d 9b       	sbis	0x0b, 5	; 11
 1fa:	fe cf       	rjmp	.-4      	; 0x1f8 <USART_Transmit>
 1fc:	8c b9       	out	0x0c, r24	; 12
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1fe:	8a e1       	ldi	r24, 0x1A	; 26
 200:	8a 95       	dec	r24
 202:	f1 f7       	brne	.-4      	; 0x200 <USART_Transmit+0x8>
	"out 0x0c,%0"	"\n\t"
	:
	:"r" (data)
  );
  _delay_us(20);
}
 204:	08 95       	ret

00000206 <USART_Init>:

void USART_Init(void)
{
  asm volatile (
 206:	00 27       	eor	r16, r16
 208:	0b b9       	out	0x0b, r16	; 11
 20a:	00 bd       	out	0x20, r16	; 32
 20c:	08 e1       	ldi	r16, 0x18	; 24
 20e:	0a b9       	out	0x0a, r16	; 10
 210:	06 e8       	ldi	r16, 0x86	; 134
 212:	00 bd       	out	0x20, r16	; 32
 214:	0c e0       	ldi	r16, 0x0C	; 12
 216:	09 b9       	out	0x09, r16	; 9
	"ldi r16,0x86"	"\n\t"
	"out 0x20,r16"	"\n\t"
	"ldi r16,0x0c"	"\n\t"
	"out 0x09,r16"	"\n\t"
  );
}
 218:	08 95       	ret

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
