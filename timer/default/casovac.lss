
casovac.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800100  00800100  00000166  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000049  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000f9  00000000  00000000  000001cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000094  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000e9  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  00000448  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ab  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_16>:
void doit1(void);

char status;

ISR(TIMER0_OVF_vect) 
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  if ((status & 1) == 1)
  9e:	80 91 00 01 	lds	r24, 0x0100
  a2:	98 2f       	mov	r25, r24
  a4:	80 ff       	sbrs	r24, 0
  a6:	03 c0       	rjmp	.+6      	; 0xae <__vector_16+0x1e>
    doit1();
}

void doit(void)
{
  DDRD ^= 0xff;
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	80 95       	com	r24
  ac:	8a b9       	out	0x0a, r24	; 10

ISR(TIMER0_OVF_vect) 
{
  if ((status & 1) == 1)
    doit();
  if ((status & 2) == 2)
  ae:	91 ff       	sbrs	r25, 1
  b0:	03 c0       	rjmp	.+6      	; 0xb8 <__vector_16+0x28>
  DDRD ^= 0xff;
}

void doit1(void)
{
  DDRD ^= 0xff;
  b2:	8a b1       	in	r24, 0x0a	; 10
  b4:	80 95       	com	r24
  b6:	8a b9       	out	0x0a, r24	; 10
{
  if ((status & 1) == 1)
    doit();
  if ((status & 2) == 2)
    doit1();
}
  b8:	9f 91       	pop	r25
  ba:	8f 91       	pop	r24
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <doit>:

void doit(void)
{
  DDRD ^= 0xff;
  c6:	8a b1       	in	r24, 0x0a	; 10
  c8:	80 95       	com	r24
  ca:	8a b9       	out	0x0a, r24	; 10
}
  cc:	08 95       	ret

000000ce <doit1>:

void doit1(void)
{
  DDRD ^= 0xff;
  ce:	8a b1       	in	r24, 0x0a	; 10
  d0:	80 95       	com	r24
  d2:	8a b9       	out	0x0a, r24	; 10
}
  d4:	08 95       	ret

000000d6 <main>:

int main()
{
  TCCR0A=0x00;
  d6:	14 bc       	out	0x24, r1	; 36
  TCCR0B=0x05;
  d8:	85 e0       	ldi	r24, 0x05	; 5
  da:	85 bd       	out	0x25, r24	; 37
  TCNT0=0x00;
  dc:	16 bc       	out	0x26, r1	; 38
  TIMSK0=0x01;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	80 93 6e 00 	sts	0x006E, r24

  asm("sei");
  e4:	78 94       	sei
  status = 3;
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	80 93 00 01 	sts	0x0100, r24
  ec:	ff cf       	rjmp	.-2      	; 0xec <main+0x16>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
