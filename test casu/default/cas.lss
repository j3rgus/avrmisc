
cas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000064  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000025  00000000  00000000  000000d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000bb  00000000  00000000  000000fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000088  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000007d  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000093  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>
  22:	07 c0       	rjmp	.+14     	; 0x32 <__bad_interrupt>
  24:	06 c0       	rjmp	.+12     	; 0x32 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	02 d0       	rcall	.+4      	; 0x34 <main>
  30:	17 c0       	rjmp	.+46     	; 0x60 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <main>:
  }
}

void delay(unsigned char ms)
{
asm volatile (
  34:	83 e0       	ldi	r24, 0x03	; 3
  36:	00 27       	eor	r16, r16
  38:	11 27       	eor	r17, r17
  3a:	28 2f       	mov	r18, r24
  3c:	03 95       	inc	r16
  3e:	0a 3f       	cpi	r16, 0xFA	; 250
  40:	e9 f7       	brne	.-6      	; 0x3c <main+0x8>
  42:	13 95       	inc	r17
  44:	18 3c       	cpi	r17, 0xC8	; 200
  46:	d1 f7       	brne	.-12     	; 0x3c <main+0x8>


int main(void)
{
  delay(3);
  PORTB = 0;
  48:	18 ba       	out	0x18, r1	; 24
  4a:	ff cf       	rjmp	.-2      	; 0x4a <__SREG__+0xb>

0000004c <delay>:
  }
}

void delay(unsigned char ms)
{
asm volatile (
  4c:	00 27       	eor	r16, r16
  4e:	11 27       	eor	r17, r17
  50:	28 2f       	mov	r18, r24
  52:	03 95       	inc	r16
  54:	0a 3f       	cpi	r16, 0xFA	; 250
  56:	e9 f7       	brne	.-6      	; 0x52 <delay+0x6>
  58:	13 95       	inc	r17
  5a:	18 3c       	cpi	r17, 0xC8	; 200
  5c:	d1 f7       	brne	.-12     	; 0x52 <delay+0x6>
	"cpi r17,200"  "\n\t"
	"brne 1b"	  "\n\t"
	:
	: "r" (ms)
);
}
  5e:	08 95       	ret

00000060 <_exit>:
  60:	f8 94       	cli

00000062 <__stop_program>:
  62:	ff cf       	rjmp	.-2      	; 0x62 <__stop_program>
